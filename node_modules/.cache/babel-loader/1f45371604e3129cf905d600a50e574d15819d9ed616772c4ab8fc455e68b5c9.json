{"ast":null,"code":"import { useEventTarget } from \"./chunk-YH7PRLMG.mjs\";\n\n// src/listener.tsx\nimport { useEffect } from \"react\";\nfunction useListener(target, type, listener) {\n  useEffect(() => {\n    const _listener = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return listener(...args, target);\n    };\n    const mapEventListener = naver.maps.Event.addListener(target, type, _listener);\n    return () => {\n      naver.maps.Event.removeListener(mapEventListener);\n    };\n  }, [target, type, listener]);\n}\nvar Listener = props => {\n  const {\n    target: propTarget,\n    type,\n    listener\n  } = props;\n  const contextTarget = useEventTarget();\n  const target = propTarget || contextTarget;\n  if (!target) {\n    throw new Error(\"react-naver-maps: No Target to add listener\");\n  }\n  useListener(target, type, listener);\n  return null;\n};\nfunction getListenerKeys(props) {\n  return Object.keys(props).filter(key => /on[A-Z]\\w+/.test(key));\n}\nexport { useListener, Listener, getListenerKeys };","map":{"version":3,"names":["useEffect","useListener","target","type","listener","_listener","_len","arguments","length","args","Array","_key","mapEventListener","naver","maps","Event","addListener","removeListener","Listener","props","propTarget","contextTarget","useEventTarget","Error","getListenerKeys","Object","keys","filter","key","test"],"sources":["C:\\Users\\mhcho1\\Desktop\\react-Project\\kakaomap-app\\node_modules\\react-naver-maps\\src\\listener.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport type { FunctionComponent } from 'react';\n\nimport { useEventTarget } from './contexts/event-target';\nimport type { AllowedKey } from './types/utils';\n\nexport function useListener(target: any, type: string, listener: (...args: any[]) => void) {\n  useEffect(() => {\n    const _listener = (...args: any[]) => listener(...args, target);\n    const mapEventListener = naver.maps.Event.addListener(target, type, _listener);\n\n    return () => {\n      naver.maps.Event.removeListener(mapEventListener);\n    };\n  }, [target, type, listener]);\n}\n\nexport interface Props {\n  target?: any;\n  type: string;\n  listener: (...args: any[]) => any;\n}\n\nexport const Listener: FunctionComponent<Props> = (props) => {\n  const {\n    target: propTarget,\n    type,\n    listener,\n  } = props;\n\n  const contextTarget = useEventTarget();\n  const target = propTarget || contextTarget;\n  if (!target) {\n    throw new Error('react-naver-maps: No Target to add listener');\n  }\n\n  // TODO: FIX DefinitelyTyped\n  useListener((target as unknown) as EventTarget, type, listener);\n\n  return null;\n};\n\nexport function getListenerKeys<P extends Record<string, any>>(props: P) {\n  return Object.keys(props).filter(key => /on[A-Z]\\w+/.test(key)) as unknown as Array<AllowedKey<P, `on${string}`>>;\n}\n"],"mappings":";;;AAAA,SAASA,SAAA,QAAiB;AAMnB,SAASC,YAAYC,MAAA,EAAaC,IAAA,EAAcC,QAAA,EAAoC;EACzFJ,SAAA,CAAU,MAAM;IACd,MAAMK,SAAA,GAAY,SAAAA,CAAA;MAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAIC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MAAA,OAAgBP,QAAA,CAAS,GAAGK,IAAA,EAAMP,MAAM;IAAA;IAC9D,MAAMU,gBAAA,GAAmBC,KAAA,CAAMC,IAAA,CAAKC,KAAA,CAAMC,WAAA,CAAYd,MAAA,EAAQC,IAAA,EAAME,SAAS;IAE7E,OAAO,MAAM;MACXQ,KAAA,CAAMC,IAAA,CAAKC,KAAA,CAAME,cAAA,CAAeL,gBAAgB;IAClD;EACF,GAAG,CAACV,MAAA,EAAQC,IAAA,EAAMC,QAAQ,CAAC;AAC7B;AAQO,IAAMc,QAAA,GAAsCC,KAAA,IAAU;EAC3D,MAAM;IACJjB,MAAA,EAAQkB,UAAA;IACRjB,IAAA;IACAC;EACF,IAAIe,KAAA;EAEJ,MAAME,aAAA,GAAgBC,cAAA,EAAe;EACrC,MAAMpB,MAAA,GAASkB,UAAA,IAAcC,aAAA;EAC7B,IAAI,CAACnB,MAAA,EAAQ;IACX,MAAM,IAAIqB,KAAA,CAAM,6CAA6C;EAC/D;EAGAtB,WAAA,CAAaC,MAAA,EAAmCC,IAAA,EAAMC,QAAQ;EAE9D,OAAO;AACT;AAEO,SAASoB,gBAA+CL,KAAA,EAAU;EACvE,OAAOM,MAAA,CAAOC,IAAA,CAAKP,KAAK,EAAEQ,MAAA,CAAOC,GAAA,IAAO,aAAaC,IAAA,CAAKD,GAAG,CAAC;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}