{"ast":null,"code":"import { omitUndefined } from \"./chunk-RVDAKL7Q.mjs\";\nimport { useNavermaps } from \"./chunk-TWFVD6WD.mjs\";\nimport { HandleEvents } from \"./chunk-533MYCRP.mjs\";\nimport { Overlay } from \"./chunk-IV7GZJYG.mjs\";\n\n// src/overlays/rectangle.tsx\nimport pick from \"lodash.pick\";\nimport { useEffect, useState, forwardRef, useImperativeHandle } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar optionKeys = [\"strokeWeight\", \"strokeOpacity\", \"strokeColor\", \"strokeStyle\", \"strokeLineCap\", \"strokeLineJoin\", \"fillColor\", \"fillOpacity\"];\nvar kvoKeys = [\"bounds\", \"clickable\", \"visible\", \"zIndex\"];\nvar kvoEvents = kvoKeys.map(key => `${key}_changed`);\nvar uiEvents = [\"click\", \"dblclick\", \"mousedown\", \"mouseout\", \"mouseover\", \"mouseup\"];\nvar events = [...uiEvents, ...kvoEvents];\nvar Rectangle = forwardRef(function Rectangle2(props, ref) {\n  const options = pick(props, [...optionKeys, ...kvoKeys]);\n  const navermaps = useNavermaps();\n  const [rectangle] = useState(() => new navermaps.Rectangle(options));\n  useImperativeHandle(ref, () => rectangle);\n  useEffect(() => {\n    rectangle.setOptions(omitUndefined(options));\n  }, kvoKeys.map(key => options[key]));\n  return /* @__PURE__ */jsx(Overlay, {\n    element: rectangle,\n    children: /* @__PURE__ */jsx(HandleEvents, {\n      events,\n      listeners: props\n    })\n  });\n});\nexport { Rectangle };","map":{"version":3,"names":["pick","useEffect","useState","forwardRef","useImperativeHandle","jsx","optionKeys","kvoKeys","kvoEvents","map","key","uiEvents","events","Rectangle","Rectangle2","props","ref","options","navermaps","useNavermaps","rectangle","setOptions","omitUndefined","Overlay","element","children","HandleEvents","listeners"],"sources":["C:\\Users\\mhcho1\\Desktop\\react-Project\\kakaomap-app\\node_modules\\react-naver-maps\\src\\overlays\\rectangle.tsx"],"sourcesContent":["import pick from 'lodash.pick';\nimport { useEffect, useState, forwardRef, useImperativeHandle } from 'react';\n\nimport { HandleEvents } from '../helpers/event';\nimport { Overlay } from '../overlay';\nimport type { UIEventHandlers } from '../types/event';\nimport { useNavermaps } from '../use-navermaps';\nimport { omitUndefined } from '../utils/omit-undefined';\n\nconst optionKeys = [\n  'strokeWeight',\n  'strokeOpacity',\n  'strokeColor',\n  'strokeStyle',\n  'strokeLineCap',\n  'strokeLineJoin',\n  'fillColor',\n  'fillOpacity',\n] as const;\nconst kvoKeys = [\n  'bounds',\n  'clickable',\n  'visible',\n  'zIndex',\n] as const;\nconst kvoEvents = kvoKeys.map(key => `${key}_changed`);\nconst uiEvents = [\n  'click',\n  'dblclick',\n  'mousedown',\n  'mouseout',\n  'mouseover',\n  'mouseup',\n] as const;\nconst events = [...uiEvents, ...kvoEvents];\n\ntype RectangleOptions = {\n  /**\n   * @type naver.maps.Bounds | naver.maps.BoundsLiteral\n   */\n  bounds: naver.maps.Bounds | naver.maps.BoundsLiteral;\n  strokeWeight?: number;\n  strokeOpacity?: number;\n  strokeColor?: string;\n  strokeStyle?: naver.maps.strokeStyleType;\n  strokeLineCap?: naver.maps.strokeLineCapType;\n  strokeLineJoin?: naver.maps.strokeLineJoinType;\n  fillColor?: string;\n  fillOpacity?: number;\n  clickable?: boolean;\n  visible?: boolean;\n  zIndex?: number;\n};\n\nexport type Props = RectangleOptions & {\n  onBoundsChanged?: (value: naver.maps.Bounds) => void;\n  onClickableChanged?: (value: boolean) => void;\n  onVisibleChanged?: (value: boolean) => void;\n  onZIndexChanged?: (value: number) => void;\n} & UIEventHandlers<typeof uiEvents>;\n\nexport const Rectangle = forwardRef<naver.maps.Rectangle, Props>(function Rectangle(props, ref) {\n  const options = pick(props, [...optionKeys, ...kvoKeys]);\n  const navermaps = useNavermaps();\n  const [rectangle] = useState(() => new navermaps.Rectangle(options));\n\n  useImperativeHandle<naver.maps.Rectangle | undefined, naver.maps.Rectangle | undefined>(ref, () => rectangle);\n\n  useEffect(() => {\n    rectangle.setOptions(omitUndefined(options) as RectangleOptions); // TODO: FIX DefinilyTyped. setOptions의 assign type 은 Partial<Options> 이어야 함\n  }, kvoKeys.map(key => options[key]));\n\n  return (\n    <Overlay element={rectangle}>\n      <HandleEvents events={events} listeners={props as any} />\n    </Overlay>\n  );\n});\n"],"mappings":";;;;;;AAAA,OAAOA,IAAA,MAAU;AACjB,SAASC,SAAA,EAAWC,QAAA,EAAUC,UAAA,EAAYC,mBAAA,QAA2B;AAyE/D,SAAAC,GAAA;AAjEN,IAAMC,UAAA,GAAa,CACjB,gBACA,iBACA,eACA,eACA,iBACA,kBACA,aACA,cACF;AACA,IAAMC,OAAA,GAAU,CACd,UACA,aACA,WACA,SACF;AACA,IAAMC,SAAA,GAAYD,OAAA,CAAQE,GAAA,CAAIC,GAAA,IAAO,GAAGA,GAAA,UAAa;AACrD,IAAMC,QAAA,GAAW,CACf,SACA,YACA,aACA,YACA,aACA,UACF;AACA,IAAMC,MAAA,GAAS,CAAC,GAAGD,QAAA,EAAU,GAAGH,SAAS;AA2BlC,IAAMK,SAAA,GAAYV,UAAA,CAAwC,SAASW,WAAUC,KAAA,EAAOC,GAAA,EAAK;EAC9F,MAAMC,OAAA,GAAUjB,IAAA,CAAKe,KAAA,EAAO,CAAC,GAAGT,UAAA,EAAY,GAAGC,OAAO,CAAC;EACvD,MAAMW,SAAA,GAAYC,YAAA,EAAa;EAC/B,MAAM,CAACC,SAAS,IAAIlB,QAAA,CAAS,MAAM,IAAIgB,SAAA,CAAUL,SAAA,CAAUI,OAAO,CAAC;EAEnEb,mBAAA,CAAwFY,GAAA,EAAK,MAAMI,SAAS;EAE5GnB,SAAA,CAAU,MAAM;IACdmB,SAAA,CAAUC,UAAA,CAAWC,aAAA,CAAcL,OAAO,CAAqB;EACjE,GAAGV,OAAA,CAAQE,GAAA,CAAIC,GAAA,IAAOO,OAAA,CAAQP,GAAA,CAAI,CAAC;EAEnC,OACE,eAAAL,GAAA,CAACkB,OAAA;IAAQC,OAAA,EAASJ,SAAA;IAChBK,QAAA,iBAAApB,GAAA,CAACqB,YAAA;MAAad,MAAA;MAAgBe,SAAA,EAAWZ;IAAA,CAAc;EAAA,CACzD;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}