{"ast":null,"code":"import { loadScript } from \"./chunk-F6WKUPXL.mjs\";\n\n// src/load-navermaps-script.tsx\nimport { useEffect, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction loadNavermapsScript(options) {\n  const url = makeUrl(options);\n  const promise = loadScript(url).then(() => {\n    const navermaps = window.naver.maps;\n    if (navermaps.jsContentLoaded) {\n      return navermaps;\n    }\n    return new Promise(resolve => {\n      navermaps.onJSContentLoaded = () => {\n        resolve(navermaps);\n      };\n    });\n  });\n  return promise;\n}\nfunction makeUrl(options) {\n  const submodules = options.submodules;\n  const clientIdQuery = \"ncpClientId\" in options ? `ncpClientId=${options.ncpClientId}` : \"govClientId\" in options ? `govClientId=${options.govClientId}` : \"finClientId\" in options ? `finClientId=${options.finClientId}` : void 0;\n  if (!clientIdQuery) {\n    throw new Error(\"react-naver-maps: ncpClientId, govClientId or finClientId is required\");\n  }\n  let url = `https://openapi.map.naver.com/openapi/v3/maps.js?${clientIdQuery}`;\n  if (submodules) {\n    url += `&submodules=${submodules.join(\",\")}`;\n  }\n  return url;\n}\nfunction LoadNavermapsScript(_ref) {\n  let {\n    children: Children,\n    ...options\n  } = _ref;\n  const [navermaps, setNavermaps] = useState();\n  useEffect(() => {\n    loadNavermapsScript(options).then(maps => {\n      setNavermaps(maps);\n    });\n  }, []);\n  return navermaps && Children ? /* @__PURE__ */jsx(Children, {}) : null;\n}\nexport { loadNavermapsScript, LoadNavermapsScript };","map":{"version":3,"names":["useEffect","useState","jsx","loadNavermapsScript","options","url","makeUrl","promise","loadScript","then","navermaps","window","naver","maps","jsContentLoaded","Promise","resolve","onJSContentLoaded","submodules","clientIdQuery","ncpClientId","govClientId","finClientId","Error","join","LoadNavermapsScript","_ref","children","Children","setNavermaps"],"sources":["C:\\Users\\mhcho1\\Desktop\\react-Project\\kakaomap-app\\node_modules\\react-naver-maps\\src\\load-navermaps-script.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport type { ReactElement } from 'react';\n\nimport type { ClientOptions } from './types/client';\nimport { loadScript } from './utils/load-script';\n\nexport function loadNavermapsScript(options: ClientOptions) {\n  const url = makeUrl(options);\n\n  // TODO: Caching Promise\n\n  const promise = loadScript(url).then(() => {\n    const navermaps = window.naver.maps;\n\n    if (navermaps.jsContentLoaded) {\n      return navermaps;\n    }\n\n    return new Promise<typeof naver.maps>(resolve => {\n      navermaps.onJSContentLoaded = () => {\n        resolve(navermaps);\n      };\n    });\n  });\n\n  return promise;\n}\n\nfunction makeUrl(options: ClientOptions) {\n  const submodules = options.submodules;\n\n  const clientIdQuery = 'ncpClientId' in options\n    ? `ncpClientId=${options.ncpClientId}`\n    : 'govClientId' in options\n      ? `govClientId=${options.govClientId}`\n      : 'finClientId' in options\n        ? `finClientId=${options.finClientId}`\n        : undefined;\n\n  if (!clientIdQuery) {\n    throw new Error('react-naver-maps: ncpClientId, govClientId or finClientId is required');\n  }\n\n  let url = `https://openapi.map.naver.com/openapi/v3/maps.js?${clientIdQuery}`;\n\n  if (submodules) {\n    url += `&submodules=${submodules.join(',')}`;\n  }\n\n  return url;\n}\n\ntype Props = ClientOptions & {\n  children: () => ReactElement;\n};\n\nexport function LoadNavermapsScript({\n  children: Children,\n  ...options\n}: Props) {\n  const [navermaps, setNavermaps] = useState<typeof naver.maps>();\n\n  useEffect(() => {\n    loadNavermapsScript(options).then((maps) => {\n      setNavermaps(maps);\n    });\n  }, []);\n\n  return (\n    (navermaps && Children) ? <Children /> : null\n  );\n}\n"],"mappings":";;;AAAA,SAASA,SAAA,EAAWC,QAAA,QAAgB;AAqEN,SAAAC,GAAA;AA/DvB,SAASC,oBAAoBC,OAAA,EAAwB;EAC1D,MAAMC,GAAA,GAAMC,OAAA,CAAQF,OAAO;EAI3B,MAAMG,OAAA,GAAUC,UAAA,CAAWH,GAAG,EAAEI,IAAA,CAAK,MAAM;IACzC,MAAMC,SAAA,GAAYC,MAAA,CAAOC,KAAA,CAAMC,IAAA;IAE/B,IAAIH,SAAA,CAAUI,eAAA,EAAiB;MAC7B,OAAOJ,SAAA;IACT;IAEA,OAAO,IAAIK,OAAA,CAA2BC,OAAA,IAAW;MAC/CN,SAAA,CAAUO,iBAAA,GAAoB,MAAM;QAClCD,OAAA,CAAQN,SAAS;MACnB;IACF,CAAC;EACH,CAAC;EAED,OAAOH,OAAA;AACT;AAEA,SAASD,QAAQF,OAAA,EAAwB;EACvC,MAAMc,UAAA,GAAad,OAAA,CAAQc,UAAA;EAE3B,MAAMC,aAAA,GAAgB,iBAAiBf,OAAA,GACnC,eAAeA,OAAA,CAAQgB,WAAA,KACvB,iBAAiBhB,OAAA,GACf,eAAeA,OAAA,CAAQiB,WAAA,KACvB,iBAAiBjB,OAAA,GACf,eAAeA,OAAA,CAAQkB,WAAA,KACvB;EAER,IAAI,CAACH,aAAA,EAAe;IAClB,MAAM,IAAII,KAAA,CAAM,uEAAuE;EACzF;EAEA,IAAIlB,GAAA,GAAM,oDAAoDc,aAAA;EAE9D,IAAID,UAAA,EAAY;IACdb,GAAA,IAAO,eAAea,UAAA,CAAWM,IAAA,CAAK,GAAG;EAC3C;EAEA,OAAOnB,GAAA;AACT;AAMO,SAASoB,oBAAAC,IAAA,EAGN;EAAA,IAH0B;IAClCC,QAAA,EAAUC,QAAA;IAAA,GACPxB;EACL,IAAAsB,IAAA;EACE,MAAM,CAAChB,SAAA,EAAWmB,YAAY,IAAI5B,QAAA,EAA4B;EAE9DD,SAAA,CAAU,MAAM;IACdG,mBAAA,CAAoBC,OAAO,EAAEK,IAAA,CAAMI,IAAA,IAAS;MAC1CgB,YAAA,CAAahB,IAAI;IACnB,CAAC;EACH,GAAG,EAAE;EAEL,OACGH,SAAA,IAAakB,QAAA,GAAY,eAAA1B,GAAA,CAAC0B,QAAA,IAAS,IAAK;AAE7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}