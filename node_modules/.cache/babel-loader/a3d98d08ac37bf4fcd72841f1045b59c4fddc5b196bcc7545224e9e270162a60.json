{"ast":null,"code":"import { useNavermaps } from \"./chunk-TWFVD6WD.mjs\";\nimport { HandleEvents } from \"./chunk-533MYCRP.mjs\";\nimport { Overlay } from \"./chunk-IV7GZJYG.mjs\";\n\n// src/overlays/ground-overlay.tsx\nimport pick from \"lodash.pick\";\nimport { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar kvoKeys = [\"clickable\", \"opacity\"];\nvar kvoEvents = kvoKeys.map(key => `${key}_changed`);\nvar uiEvents = [\"mousedown\", \"mouseup\", \"click\", \"dblclick\", \"rightclick\", \"mouseover\", \"mouseout\", \"mousemove\"];\nvar events = [...uiEvents, ...kvoEvents];\nvar GroundOverlay = forwardRef(function GroundOverlay2(props, ref) {\n  const options = pick(props, kvoKeys);\n  const {\n    url,\n    bounds\n  } = props;\n  const navermaps = useNavermaps();\n  const [groundOverlay, setGroundOverlay] = useState(() => new navermaps.GroundOverlay(url, bounds, options));\n  useImperativeHandle(ref, () => groundOverlay, [groundOverlay]);\n  useEffect(() => {\n    if (groundOverlay.getUrl() !== url || groundOverlay.getBounds().equals(bounds)) {\n      setGroundOverlay(new naver.maps.GroundOverlay(url, bounds, options));\n    }\n  }, [url, bounds]);\n  useEffect(() => {\n    kvoKeys.forEach(key => {\n      if (options[key] && groundOverlay.get(key) !== options[key]) {\n        groundOverlay.set(key, options[key]);\n      }\n    });\n  }, kvoKeys.map(key => options[key]));\n  return /* @__PURE__ */jsx(Overlay, {\n    element: groundOverlay,\n    children: /* @__PURE__ */jsx(HandleEvents, {\n      events,\n      listeners: props\n    })\n  });\n});\nexport { GroundOverlay };","map":{"version":3,"names":["pick","forwardRef","useEffect","useImperativeHandle","useState","jsx","kvoKeys","kvoEvents","map","key","uiEvents","events","GroundOverlay","GroundOverlay2","props","ref","options","url","bounds","navermaps","useNavermaps","groundOverlay","setGroundOverlay","getUrl","getBounds","equals","naver","maps","forEach","get","set","Overlay","element","children","HandleEvents","listeners"],"sources":["C:\\Users\\mhcho1\\Desktop\\react-Project\\kakaomap-app\\node_modules\\react-naver-maps\\src\\overlays\\ground-overlay.tsx"],"sourcesContent":["import pick from 'lodash.pick';\nimport { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\n\nimport { HandleEvents } from '../helpers/event';\nimport { Overlay } from '../overlay';\nimport type { UIEventHandlers } from '../types/event';\nimport { useNavermaps } from '../use-navermaps';\n\nconst kvoKeys = [\n  'clickable',\n  'opacity',\n] as const;\nconst kvoEvents = kvoKeys.map(key => `${key}_changed`);\nconst uiEvents = [\n  'mousedown',\n  'mouseup',\n  'click',\n  'dblclick',\n  'rightclick',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n] as const;\nconst events = [...uiEvents, ...kvoEvents];\n\ntype GroundOverlayOptions = {\n  clickable?: boolean;\n  opacity?: number;\n};\n\nexport type Props = GroundOverlayOptions & {\n  url: string;\n  /**\n   * bounds\n   * @type naver.maps.Bounds | naver.maps.BoundsLiteral\n   */\n  bounds: naver.maps.Bounds | naver.maps.BoundsLiteral;\n  onOpacityChanged?: (value: number) => void;\n  onClickableChanged?: (event: boolean) => void;\n} & UIEventHandlers<typeof uiEvents>;\n\nexport const GroundOverlay = forwardRef<naver.maps.GroundOverlay, Props>(function GroundOverlay(props, ref) {\n  const options = pick(props, kvoKeys);\n  const { url, bounds } = props;\n  const navermaps = useNavermaps();\n  const [groundOverlay, setGroundOverlay] = useState(() => new navermaps.GroundOverlay(url, bounds, options));\n\n  useImperativeHandle<naver.maps.GroundOverlay | undefined, naver.maps.GroundOverlay | undefined>(ref, () => groundOverlay, [groundOverlay]);\n\n  useEffect(() => {\n    if (groundOverlay.getUrl() !== url || groundOverlay.getBounds().equals(bounds as naver.maps.Bounds)) {\n      setGroundOverlay(new naver.maps.GroundOverlay(url, bounds, options));\n    }\n  }, [url, bounds]);\n\n  useEffect(() => {\n    kvoKeys.forEach(key => {\n      if (options[key] && groundOverlay.get(key) !== options[key]) {\n        groundOverlay.set(key, options[key]);\n      }\n    });\n  }, kvoKeys.map(key => options[key]));\n\n  return (\n    <Overlay element={groundOverlay}>\n      <HandleEvents events={events} listeners={props as any} />\n    </Overlay>\n  );\n});\n"],"mappings":";;;;;AAAA,OAAOA,IAAA,MAAU;AACjB,SAASC,UAAA,EAAYC,SAAA,EAAWC,mBAAA,EAAqBC,QAAA,QAAgB;AAgE/D,SAAAC,GAAA;AAzDN,IAAMC,OAAA,GAAU,CACd,aACA,UACF;AACA,IAAMC,SAAA,GAAYD,OAAA,CAAQE,GAAA,CAAIC,GAAA,IAAO,GAAGA,GAAA,UAAa;AACrD,IAAMC,QAAA,GAAW,CACf,aACA,WACA,SACA,YACA,cACA,aACA,YACA,YACF;AACA,IAAMC,MAAA,GAAS,CAAC,GAAGD,QAAA,EAAU,GAAGH,SAAS;AAkBlC,IAAMK,aAAA,GAAgBX,UAAA,CAA4C,SAASY,eAAcC,KAAA,EAAOC,GAAA,EAAK;EAC1G,MAAMC,OAAA,GAAUhB,IAAA,CAAKc,KAAA,EAAOR,OAAO;EACnC,MAAM;IAAEW,GAAA;IAAKC;EAAO,IAAIJ,KAAA;EACxB,MAAMK,SAAA,GAAYC,YAAA,EAAa;EAC/B,MAAM,CAACC,aAAA,EAAeC,gBAAgB,IAAIlB,QAAA,CAAS,MAAM,IAAIe,SAAA,CAAUP,aAAA,CAAcK,GAAA,EAAKC,MAAA,EAAQF,OAAO,CAAC;EAE1Gb,mBAAA,CAAgGY,GAAA,EAAK,MAAMM,aAAA,EAAe,CAACA,aAAa,CAAC;EAEzInB,SAAA,CAAU,MAAM;IACd,IAAImB,aAAA,CAAcE,MAAA,EAAO,KAAMN,GAAA,IAAOI,aAAA,CAAcG,SAAA,EAAU,CAAEC,MAAA,CAAOP,MAA2B,GAAG;MACnGI,gBAAA,CAAiB,IAAII,KAAA,CAAMC,IAAA,CAAKf,aAAA,CAAcK,GAAA,EAAKC,MAAA,EAAQF,OAAO,CAAC;IACrE;EACF,GAAG,CAACC,GAAA,EAAKC,MAAM,CAAC;EAEhBhB,SAAA,CAAU,MAAM;IACdI,OAAA,CAAQsB,OAAA,CAAQnB,GAAA,IAAO;MACrB,IAAIO,OAAA,CAAQP,GAAA,KAAQY,aAAA,CAAcQ,GAAA,CAAIpB,GAAG,MAAMO,OAAA,CAAQP,GAAA,GAAM;QAC3DY,aAAA,CAAcS,GAAA,CAAIrB,GAAA,EAAKO,OAAA,CAAQP,GAAA,CAAI;MACrC;IACF,CAAC;EACH,GAAGH,OAAA,CAAQE,GAAA,CAAIC,GAAA,IAAOO,OAAA,CAAQP,GAAA,CAAI,CAAC;EAEnC,OACE,eAAAJ,GAAA,CAAC0B,OAAA;IAAQC,OAAA,EAASX,aAAA;IAChBY,QAAA,iBAAA5B,GAAA,CAAC6B,YAAA;MAAavB,MAAA;MAAgBwB,SAAA,EAAWrB;IAAA,CAAc;EAAA,CACzD;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}