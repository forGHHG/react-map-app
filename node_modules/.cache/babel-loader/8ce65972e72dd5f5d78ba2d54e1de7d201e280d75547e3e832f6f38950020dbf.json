{"ast":null,"code":"import { omitUndefined } from \"./chunk-RVDAKL7Q.mjs\";\nimport { useNavermaps } from \"./chunk-TWFVD6WD.mjs\";\nimport { HandleEvents } from \"./chunk-533MYCRP.mjs\";\nimport { Overlay } from \"./chunk-IV7GZJYG.mjs\";\n\n// src/overlays/polygon.tsx\nimport pick from \"lodash.pick\";\nimport { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar kvoKeys = [\"paths\", \"strokeWeight\", \"strokeOpacity\", \"strokeColor\", \"strokeStyle\", \"strokeLineCap\", \"strokeLineJoin\", \"fillColor\", \"fillOpacity\", \"clickable\", \"visible\", \"zIndex\"];\nvar kvoEvents = kvoKeys.map(key => `${key}_changed`);\nvar uiEvents = [\"mousedown\", \"mouseup\", \"click\", \"dblclick\", \"rightclick\", \"mouseover\", \"mouseout\", \"mousemove\"];\nvar events = [...uiEvents, ...kvoEvents];\nvar Polygon = forwardRef(function Polygon2(props, ref) {\n  const options = pick(props, [...kvoKeys]);\n  const navermaps = useNavermaps();\n  const [polygon] = useState(() => new navermaps.Polygon(options));\n  useImperativeHandle(ref, () => polygon);\n  useEffect(() => {\n    polygon.setOptions(omitUndefined(options));\n  }, kvoKeys.map(key => options[key]));\n  return /* @__PURE__ */jsx(Overlay, {\n    element: polygon,\n    children: /* @__PURE__ */jsx(HandleEvents, {\n      events,\n      listeners: props\n    })\n  });\n});\nexport { Polygon };","map":{"version":3,"names":["pick","forwardRef","useEffect","useImperativeHandle","useState","jsx","kvoKeys","kvoEvents","map","key","uiEvents","events","Polygon","Polygon2","props","ref","options","navermaps","useNavermaps","polygon","setOptions","omitUndefined","Overlay","element","children","HandleEvents","listeners"],"sources":["C:\\Users\\mhcho1\\Desktop\\react-Project\\kakaomap-app\\node_modules\\react-naver-maps\\src\\overlays\\polygon.tsx"],"sourcesContent":["import pick from 'lodash.pick';\nimport { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\n\nimport { HandleEvents } from '../helpers/event';\nimport { Overlay } from '../overlay';\nimport type { UIEventHandlers } from '../types/event';\nimport { useNavermaps } from '../use-navermaps';\nimport { omitUndefined } from '../utils/omit-undefined';\n\nconst kvoKeys = [\n  'paths',\n  'strokeWeight',\n  'strokeOpacity',\n  'strokeColor',\n  'strokeStyle',\n  'strokeLineCap',\n  'strokeLineJoin',\n  'fillColor',\n  'fillOpacity',\n  'clickable',\n  'visible',\n  'zIndex',\n] as const;\nconst kvoEvents = kvoKeys.map(key => `${key}_changed`);\nconst uiEvents = [\n  'mousedown',\n  'mouseup',\n  'click',\n  'dblclick',\n  'rightclick',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n] as const;\nconst events = [...uiEvents, ...kvoEvents];\n\ntype PolygonOptions = {\n  /**\n   * @type naver.maps.ArrayOfCoords[] | naver.maps.KVOArrayOfCoords[] | naver.maps.ArrayOfCoordsLiteral[]\n   */\n  paths: naver.maps.ArrayOfCoords[] | naver.maps.KVOArrayOfCoords[] | naver.maps.ArrayOfCoordsLiteral[];\n  strokeWeight?: number;\n  strokeOpacity?: number;\n  strokeColor?: string;\n  strokeStyle?: naver.maps.strokeStyleType;\n  strokeLineCap?: naver.maps.strokeLineCapType;\n  strokeLineJoin?: naver.maps.strokeLineJoinType;\n  fillColor?: string;\n  fillOpacity?: number;\n  clickable?: boolean;\n  visible?: boolean;\n  zIndex?: number;\n};\n\nexport type Props = PolygonOptions & {\n  onPathsChanged?: (value: Array<naver.maps.ArrayOfCoords>) => void;\n  onStrokeWeightChanged?: (value: number) => void;\n  onStrokeOpacityChanged?: (value: number) => void;\n  onStrokeColorChanged?: (value: string) => void;\n  onStrokeStyleChanged?: (value: naver.maps.strokeStyleType) => void;\n  onStrokeLineCapChanged?: (value: naver.maps.strokeLineCapType) => void;\n  onStrokeLineJoinChanged?: (value: naver.maps.strokeLineJoinType) => void;\n  onFillColorChanged?: (value: string) => void;\n  onFillOpacityChanged?: (value: number) => void;\n  onClickableChanged?: (event: boolean) => void;\n  onVisibleChanged?: (event: boolean) => void;\n  onZIndexChanged?: (event: number) => void;\n} & UIEventHandlers<typeof uiEvents>;\n\nexport const Polygon = forwardRef<naver.maps.Polygon, Props>(function Polygon(props, ref) {\n  const options = pick(props, [...kvoKeys]);\n  const navermaps = useNavermaps();\n  const [polygon] = useState(() => new navermaps.Polygon(options));\n\n  useImperativeHandle<naver.maps.Polygon | undefined, naver.maps.Polygon | undefined>(ref, () => polygon);\n\n  useEffect(() => {\n    polygon.setOptions(omitUndefined(options) as PolygonOptions); // TODO: FIX DefinilyTyped. setOptions의 assign type 은 Partial<Options> 이어야 함\n  }, kvoKeys.map(key => options[key]));\n\n  return (\n    <Overlay element={polygon}>\n      <HandleEvents events={events} listeners={props as any} />\n    </Overlay>\n  );\n});\n"],"mappings":";;;;;;AAAA,OAAOA,IAAA,MAAU;AACjB,SAASC,UAAA,EAAYC,SAAA,EAAWC,mBAAA,EAAqBC,QAAA,QAAgB;AAiF/D,SAAAC,GAAA;AAzEN,IAAMC,OAAA,GAAU,CACd,SACA,gBACA,iBACA,eACA,eACA,iBACA,kBACA,aACA,eACA,aACA,WACA,SACF;AACA,IAAMC,SAAA,GAAYD,OAAA,CAAQE,GAAA,CAAIC,GAAA,IAAO,GAAGA,GAAA,UAAa;AACrD,IAAMC,QAAA,GAAW,CACf,aACA,WACA,SACA,YACA,cACA,aACA,YACA,YACF;AACA,IAAMC,MAAA,GAAS,CAAC,GAAGD,QAAA,EAAU,GAAGH,SAAS;AAmClC,IAAMK,OAAA,GAAUX,UAAA,CAAsC,SAASY,SAAQC,KAAA,EAAOC,GAAA,EAAK;EACxF,MAAMC,OAAA,GAAUhB,IAAA,CAAKc,KAAA,EAAO,CAAC,GAAGR,OAAO,CAAC;EACxC,MAAMW,SAAA,GAAYC,YAAA,EAAa;EAC/B,MAAM,CAACC,OAAO,IAAIf,QAAA,CAAS,MAAM,IAAIa,SAAA,CAAUL,OAAA,CAAQI,OAAO,CAAC;EAE/Db,mBAAA,CAAoFY,GAAA,EAAK,MAAMI,OAAO;EAEtGjB,SAAA,CAAU,MAAM;IACdiB,OAAA,CAAQC,UAAA,CAAWC,aAAA,CAAcL,OAAO,CAAmB;EAC7D,GAAGV,OAAA,CAAQE,GAAA,CAAIC,GAAA,IAAOO,OAAA,CAAQP,GAAA,CAAI,CAAC;EAEnC,OACE,eAAAJ,GAAA,CAACiB,OAAA;IAAQC,OAAA,EAASJ,OAAA;IAChBK,QAAA,iBAAAnB,GAAA,CAACoB,YAAA;MAAad,MAAA;MAAgBe,SAAA,EAAWZ;IAAA,CAAc;EAAA,CACzD;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}