{"ast":null,"code":"import { usePrevious } from \"./chunk-DEGB326C.mjs\";\nimport { useNavermaps } from \"./chunk-TWFVD6WD.mjs\";\nimport { HandleEvents } from \"./chunk-533MYCRP.mjs\";\nimport { useContainerContext } from \"./chunk-HTJMMZVM.mjs\";\nimport { NaverMapContext } from \"./chunk-OHKTFK4Q.mjs\";\nimport { EventTargetContext } from \"./chunk-YH7PRLMG.mjs\";\n\n// src/naver-map.tsx\nimport pick from \"lodash.pick\";\nimport upperfirst from \"lodash.upperfirst\";\nimport { forwardRef, useImperativeHandle, useLayoutEffect, useRef, useState } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar basicMapOptionKeys = [\"background\", \"baseTileOpacity\", \"disableDoubleClickZoom\", \"disableDoubleTapZoom\", \"disableKineticPan\", \"disableTwoFingerTapZoom\", \"draggable\", \"keyboardShortcuts\", \"logoControl\", \"logoControlOptions\", \"mapDataControl\", \"mapDataControlOptions\", \"mapTypeControl\", \"mapTypeControlOptions\", \"mapTypes\", \"maxBounds\", \"maxZoom\", \"minZoom\", \"padding\", \"pinchZoom\", \"resizeOrigin\", \"scaleControl\", \"scaleControlOptions\", \"scrollWheel\", \"overlayZoomEffect\", \"tileSpare\", \"tileTransition\", \"zoomControl\", \"zoomControlOptions\", \"zoomOrigin\", \"blankTileImage\"];\nvar kvoKeys = [\"mapTypeId\", \"size\", \"bounds\", \"center\", \"zoom\", \"centerPoint\"];\nvar kvoEvents = [...kvoKeys.map(key => `${key}_changed`), \"mapType_changed\"];\nvar uiEvents = [\"mousedown\", \"mouseup\", \"click\", \"dblclick\", \"rightclick\", \"mouseover\", \"mouseout\", \"mousemove\", \"dragstart\", \"drag\", \"dragend\", \"touchstart\", \"touchmove\", \"touchend\", \"pinchstart\", \"pinch\", \"pinchend\", \"tap\", \"longtap\", \"twofingertap\", \"doubletap\"];\nvar mapOnlyEvents = [\"addLayer\", \"idle\", \"init\", \"keydown\", \"keyup\", \"panning\", \"projection_changed\", \"removeLayer\", \"resize\", \"tilesloaded\", \"zooming\"];\nvar events = [...uiEvents, ...kvoEvents, ...mapOnlyEvents];\nvar defaultOptionKeyMap = {\n  mapTypeId: \"defaultMapTypeId\",\n  size: \"defaultSize\",\n  bounds: \"defaultBounds\",\n  center: \"defaultCenter\",\n  zoom: \"defaultZoom\",\n  centerPoint: \"defaultCenterPoint\"\n};\nvar NaverMap = forwardRef(function NaverMap2(props, ref) {\n  const navermaps = useNavermaps();\n  const {\n    element: mapDiv\n  } = useContainerContext();\n  const [nmap, setNmap] = useState();\n  const nmapRef = useRef();\n  useLayoutEffect(() => {\n    if (!mapDiv) {\n      throw new Error(\"react-naver-maps: MapDiv is not found. Did you correctly wrap with `MapDiv`?\");\n    }\n    const basicMapOptions = pick(props, basicMapOptionKeys);\n    const kvos = kvoKeys.reduce((acc, key) => {\n      if (props[defaultOptionKeyMap[key]]) {\n        return {\n          ...acc,\n          [key]: props[defaultOptionKeyMap[key]]\n        };\n      }\n      if (props[key]) {\n        return {\n          ...acc,\n          [key]: props[key]\n        };\n      }\n      return acc;\n    }, {});\n    const _nmap = new navermaps.Map(mapDiv, {\n      ...basicMapOptions,\n      ...kvos\n    });\n    setNmap(_nmap);\n    nmapRef.current = _nmap;\n    return () => {\n      _nmap.destroy();\n    };\n  }, []);\n  const uncontrolledOmittedProps = Object.keys(props).reduce((acc, key) => {\n    if (key in defaultOptionKeyMap && props[defaultOptionKeyMap[key]]) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: props[key]\n    };\n  }, {});\n  useImperativeHandle(ref, () => nmapRef.current);\n  return /* @__PURE__ */jsx(Fragment, {\n    children: nmap && /* @__PURE__ */jsx(NaverMapCore, {\n      ...uncontrolledOmittedProps,\n      nmap\n    })\n  });\n});\nfunction NaverMapCore(_ref) {\n  let {\n    nmap,\n    children,\n    ...mapProps\n  } = _ref;\n  const basicMapOptions = pick(mapProps, basicMapOptionKeys);\n  const {\n    mapTypeId,\n    size,\n    bounds,\n    center,\n    centerPoint,\n    zoom\n  } = mapProps;\n  const prevKVOs = usePrevious({\n    mapTypeId,\n    size,\n    bounds,\n    center,\n    centerPoint,\n    zoom\n  }, [mapTypeId, size, bounds, center, centerPoint, zoom]);\n  function getDirtyKVOs(keys) {\n    return keys.reduce((acc, key) => {\n      const currentValue = nmap[`get${upperfirst(key)}`]();\n      const propValue = mapProps[key];\n      if (!propValue || prevKVOs && prevKVOs[key] === propValue) {\n        return acc;\n      }\n      const isEqual = typeof currentValue.equals === \"function\" ? currentValue.equals(propValue) : currentValue === propValue;\n      if (isEqual) {\n        return acc;\n      }\n      return {\n        ...acc,\n        [key]: propValue\n      };\n    }, {});\n  }\n  useLayoutEffect(() => {\n    nmap.setOptions(basicMapOptions);\n  }, [Object.values(basicMapOptions)]);\n  useLayoutEffect(() => {\n    const updated = getDirtyKVOs([\"size\"]).size;\n    if (updated) {\n      nmap.setSize(updated);\n    }\n  }, [size]);\n  useLayoutEffect(() => {\n    const updated = getDirtyKVOs([\"mapTypeId\"]).mapTypeId;\n    if (updated) {\n      nmap.setMapTypeId(updated);\n    }\n  }, [mapTypeId]);\n  useLayoutEffect(() => {\n    const dirties = getDirtyKVOs([\"bounds\", \"center\", \"centerPoint\", \"zoom\"]);\n    if (dirties.bounds) {\n      nmap.fitBounds(dirties.bounds);\n      return;\n    }\n    if (dirties.center && dirties.zoom) {\n      nmap.morph(dirties.center, dirties.zoom);\n      return;\n    }\n    if (dirties.centerPoint) {\n      nmap.setCenterPoint(dirties.centerPoint);\n    }\n    if (dirties.center) {\n      nmap.panTo(dirties.center, {});\n    }\n    if (dirties.zoom) {\n      nmap.setZoom(dirties.zoom);\n    }\n  }, [bounds, center, centerPoint, zoom]);\n  return /* @__PURE__ */jsx(NaverMapContext.Provider, {\n    value: nmap,\n    children: /* @__PURE__ */jsx(EventTargetContext.Provider, {\n      value: nmap,\n      children: /* @__PURE__ */jsxs(Fragment, {\n        children: [/* @__PURE__ */jsx(HandleEvents, {\n          events,\n          listeners: mapProps\n        }), children]\n      })\n    })\n  });\n}\nexport { NaverMap };","map":{"version":3,"names":["pick","upperfirst","forwardRef","useImperativeHandle","useLayoutEffect","useRef","useState","Fragment","jsx","jsxs","basicMapOptionKeys","kvoKeys","kvoEvents","map","key","uiEvents","mapOnlyEvents","events","defaultOptionKeyMap","mapTypeId","size","bounds","center","zoom","centerPoint","NaverMap","NaverMap2","props","ref","navermaps","useNavermaps","element","mapDiv","useContainerContext","nmap","setNmap","nmapRef","Error","basicMapOptions","kvos","reduce","acc","_nmap","Map","current","destroy","uncontrolledOmittedProps","Object","keys","children","NaverMapCore","_ref","mapProps","prevKVOs","usePrevious","getDirtyKVOs","currentValue","propValue","isEqual","equals","setOptions","values","updated","setSize","setMapTypeId","dirties","fitBounds","morph","setCenterPoint","panTo","setZoom","NaverMapContext","Provider","value","EventTargetContext","HandleEvents","listeners"],"sources":["C:\\Users\\mhcho1\\Desktop\\react-Project\\kakaomap-app\\node_modules\\react-naver-maps\\src\\naver-map.tsx"],"sourcesContent":["import pick from 'lodash.pick';\nimport upperfirst from 'lodash.upperfirst';\nimport { forwardRef, useImperativeHandle, useLayoutEffect, useRef, useState } from 'react';\nimport type { ReactNode } from 'react';\n\nimport { useContainerContext } from './contexts/container';\nimport { EventTargetContext } from './contexts/event-target';\nimport { NaverMapContext } from './contexts/naver-map';\nimport { HandleEvents } from './helpers/event';\nimport { usePrevious } from './hooks/use-previous';\nimport { useNavermaps } from './use-navermaps';\n\ntype MapPaddingOptions = {\n  top?: number;\n  right?: number;\n  bottom?: number;\n  left?: number;\n};\n\ntype MapOptions = {\n  background?: string;\n  baseTileOpacity?: number;\n  /**\n   * @type naver.maps.Bounds | naver.maps.BoundsLiteral | null\n   */\n  bounds?: naver.maps.Bounds | naver.maps.BoundsLiteral | null;\n  /**\n   * @type naver.maps.Coord | naver.maps.CoordLiteral\n   */\n  center?: naver.maps.Coord | naver.maps.CoordLiteral;\n  disableDoubleClickZoom?: boolean;\n  disableDoubleTapZoom?: boolean;\n  disableKineticPan?: boolean;\n  disableTwoFingerTapZoom?: boolean;\n  draggable?: boolean;\n  keyboardShortcuts?: boolean;\n  logoControl?: boolean;\n  logoControlOptions?: naver.maps.LogoControlOptions;\n  mapDataControl?: boolean;\n  mapDataControlOptions?: naver.maps.MapDataControlOptions;\n  mapTypeControl?: boolean;\n  mapTypeControlOptions?: naver.maps.MapTypeControlOptions;\n  mapTypeId?: string;\n  mapTypes?: naver.maps.MapTypeRegistry;\n  maxBounds?: naver.maps.Bounds | naver.maps.BoundsLiteral | null;\n  maxZoom?: number;\n  minZoom?: number;\n  padding?: MapPaddingOptions;\n  pinchZoom?: boolean;\n  resizeOrigin?: naver.maps.Position;\n  scaleControl?: boolean;\n  scaleControlOptions?: naver.maps.ScaleControlOptions;\n  scrollWheel?: boolean;\n  size?: naver.maps.Size | naver.maps.SizeLiteral;\n  overlayZoomEffect?: string | null;\n  tileSpare?: number;\n  tileTransition?: boolean;\n  zoom?: number;\n  zoomControl?: boolean;\n  zoomControlOptions?: naver.maps.ZoomControlOptions;\n  zoomOrigin?: naver.maps.Coord | naver.maps.CoordLiteral | null;\n  blankTileImage?: string | null;\n\n  // special.\n  centerPoint?: naver.maps.Point | naver.maps.PointLiteral;\n};\n\ntype Uncontrolled = {\n  /**\n   * Uncontrolled prop of mapTypeId\n   */\n  defaultMapTypeId?: MapOptions['mapTypeId'];\n  /**\n   * Uncontrolled prop of size\n   * @type naver.maps.Coord | naver.maps.CoordLiteral\n   */\n  defaultSize?: MapOptions['size'];\n  /**\n   * Uncontrolled prop of bounds\n   * @type naver.maps.Bounds | naver.maps.BoundsLiteral | null\n   */\n  defaultBounds?: MapOptions['bounds'];\n  /**\n   * Uncontrolled prop of center\n   * @type naver.maps.Coord | naver.maps.CoordLiteral\n   */\n  defaultCenter?: MapOptions['center'];\n  /**\n   * Uncontrolled prop of zoom\n   */\n  defaultZoom?: MapOptions['zoom'];\n  /**\n   * Uncontrolled prop of centerPoint\n   * @type naver.maps.Point | naver.maps.PointLiteral\n   */\n  defaultCenterPoint?: MapOptions['centerPoint'];\n};\n\ntype MapEventCallbacks = {\n  onMapTypeIdChanged?: (value: string) => void;\n  onMapTypeChanged?: (value: naver.maps.MapType) => void;\n  onSizeChanged?: (value: naver.maps.Size) => void;\n  onBoundsChanged?: (value: naver.maps.Bounds) => void;\n  onCenterChanged?: (value: naver.maps.Coord) => void;\n  onCenterPointChanged?: (value: naver.maps.Point) => void;\n  onZoomChanged?: (value: number) => void;\n};\n\nconst basicMapOptionKeys: Array<keyof MapOptions> = [\n  'background',\n  'baseTileOpacity',\n  // 'bounds',\n  // 'center',\n  'disableDoubleClickZoom',\n  'disableDoubleTapZoom',\n  'disableKineticPan',\n  'disableTwoFingerTapZoom',\n  'draggable',\n  'keyboardShortcuts',\n  'logoControl',\n  'logoControlOptions',\n  'mapDataControl',\n  'mapDataControlOptions',\n  'mapTypeControl',\n  'mapTypeControlOptions',\n  // 'mapTypeId',\n  'mapTypes',\n  'maxBounds',\n  'maxZoom',\n  'minZoom',\n  'padding',\n  'pinchZoom',\n  'resizeOrigin',\n  'scaleControl',\n  'scaleControlOptions',\n  'scrollWheel',\n  // 'size',\n  'overlayZoomEffect',\n  'tileSpare',\n  'tileTransition',\n  // 'zoom',\n  'zoomControl',\n  'zoomControlOptions',\n  'zoomOrigin',\n  'blankTileImage',\n];\n\nconst kvoKeys = [\n  'mapTypeId',\n  'size',\n  'bounds',\n  'center',\n  'zoom',\n  'centerPoint',\n] as const;\n\nconst kvoEvents = [\n  ...kvoKeys.map(key => `${key}_changed`),\n  'mapType_changed', // special. https://navermaps.github.io/maps.js.ncp/docs/naver.maps.Map.html#event:mapType_changed__anchor\n];\nconst uiEvents = [\n  'mousedown',\n  'mouseup',\n  'click',\n  'dblclick',\n  'rightclick',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'dragstart',\n  'drag',\n  'dragend',\n  'touchstart',\n  'touchmove',\n  'touchend',\n  'pinchstart',\n  'pinch',\n  'pinchend',\n  'tap',\n  'longtap',\n  'twofingertap',\n  'doubletap',\n] as const;\nconst mapOnlyEvents = [\n  'addLayer',\n  'idle',\n  'init',\n  'keydown',\n  'keyup',\n  'panning',\n  'projection_changed',\n  'removeLayer',\n  'resize',\n  'tilesloaded',\n  'zooming',\n] as const;\nconst events = [...uiEvents, ...kvoEvents, ...mapOnlyEvents];\n\n// type FunctionTypeChildren = (nmap: naver.maps.Map) => React.ReactNode;\n\nconst defaultOptionKeyMap = {\n  mapTypeId: 'defaultMapTypeId',\n  size: 'defaultSize',\n  bounds: 'defaultBounds',\n  center: 'defaultCenter',\n  zoom: 'defaultZoom',\n  centerPoint: 'defaultCenterPoint',\n} as const;\n\nexport type Props = Uncontrolled & {\n  /**\n   * Map 관련 components\n   */\n  children?: ReactNode;\n} & MapOptions & MapEventCallbacks;\n\nexport const NaverMap = forwardRef<naver.maps.Map | null, Props>(function NaverMap(props, ref) {\n  const navermaps = useNavermaps();\n  const { element: mapDiv } = useContainerContext();\n  const [nmap, setNmap] = useState<naver.maps.Map>();\n  const nmapRef = useRef<naver.maps.Map>();\n\n  // https://github.com/facebook/react/issues/20090\n  useLayoutEffect(() => {\n    if (!mapDiv) {\n      throw new Error('react-naver-maps: MapDiv is not found. Did you correctly wrap with `MapDiv`?');\n    }\n\n    const basicMapOptions = pick(props, basicMapOptionKeys);\n    const kvos = kvoKeys.reduce((acc, key) => {\n      // default kvo\n      if (props[defaultOptionKeyMap[key]]) {\n        return {\n          ...acc,\n          [key]: props[defaultOptionKeyMap[key]],\n        };\n      }\n\n      // kvo\n      if (props[key]) {\n        return {\n          ...acc,\n          [key]: props[key],\n        };\n      }\n\n      return acc;\n    }, {});\n\n    const _nmap = new navermaps.Map(mapDiv, { ...basicMapOptions, ...kvos });\n    setNmap(_nmap);\n    // for ref hack\n    nmapRef.current = _nmap;\n\n    return () => {\n      _nmap.destroy();\n    };\n  }, []);\n\n  const uncontrolledOmittedProps = (Object.keys(props) as Array<keyof Props>).reduce((acc, key) => {\n    // kvo key가 defaultKvo key와 함께 있을 경우 무시한다.\n    if (key in defaultOptionKeyMap && props[defaultOptionKeyMap[key as keyof typeof defaultOptionKeyMap]]) {\n      return acc;\n    }\n\n    return {\n      ...acc,\n      [key]: props[key],\n    };\n  }, {}) as Props;\n\n  // nmap 이 layoutEffect에서 생성되므로 항상 Map이 존재한다.\n  useImperativeHandle<naver.maps.Map | undefined, naver.maps.Map | undefined>(ref, () => nmapRef.current);\n\n  return (\n    <>{nmap && <NaverMapCore {...uncontrolledOmittedProps} nmap={nmap} />}</>\n  );\n});\n\nfunction NaverMapCore({ nmap, children, ...mapProps }: Props & { nmap: naver.maps.Map }) {\n  const basicMapOptions = pick(mapProps, basicMapOptionKeys);\n  const {\n    mapTypeId,\n    size,\n    bounds,\n    center,\n    centerPoint,\n    zoom,\n  } = mapProps;\n\n  const prevKVOs = usePrevious({\n    mapTypeId,\n    size,\n    bounds,\n    center,\n    centerPoint,\n    zoom,\n  }, [\n    mapTypeId,\n    size,\n    bounds,\n    center,\n    centerPoint,\n    zoom,\n  ]);\n\n  function getDirtyKVOs(keys: Array<typeof kvoKeys[number]>): Pick<Props, typeof kvoKeys[number]> {\n    return keys.reduce((acc, key) => {\n      const currentValue = nmap[`get${upperfirst(key)}` as keyof naver.maps.Map]();\n      const propValue = mapProps[key];\n\n      if (!propValue || prevKVOs && prevKVOs[key] === propValue) {\n        return acc;\n      }\n\n      const isEqual = typeof currentValue.equals === 'function' ? currentValue.equals(propValue) : currentValue === propValue;\n\n      if (isEqual) {\n        return acc;\n      }\n\n      return {\n        ...acc,\n        [key]: propValue,\n      };\n    }, {} as Pick<Props, typeof kvoKeys[number]>);\n  }\n\n  useLayoutEffect(() => {\n    nmap.setOptions(basicMapOptions);\n  }, [Object.values(basicMapOptions)]);\n\n  useLayoutEffect(() => {\n    const updated = getDirtyKVOs(['size']).size;\n    if (updated) {\n      nmap.setSize(updated);\n    }\n  }, [size]);\n\n  useLayoutEffect(() => {\n    const updated = getDirtyKVOs(['mapTypeId']).mapTypeId;\n    if (updated) {\n      nmap.setMapTypeId(updated);\n    }\n  }, [mapTypeId]);\n\n  useLayoutEffect(() => {\n    const dirties = getDirtyKVOs(['bounds', 'center', 'centerPoint', 'zoom']);\n\n    if (dirties.bounds) {\n      // TODO\n      nmap.fitBounds(dirties.bounds);\n\n      // Ignore rest kvos\n      return;\n    }\n\n    if (dirties.center && dirties.zoom) {\n\n      nmap.morph(dirties.center, dirties.zoom);\n\n      // Ignore rest kvos\n      return;\n    }\n\n    if (dirties.centerPoint) {\n      nmap.setCenterPoint(dirties.centerPoint);\n    }\n\n    if (dirties.center) {\n      // TODO\n      nmap.panTo(dirties.center, {});\n    }\n\n    if (dirties.zoom) {\n      nmap.setZoom(dirties.zoom);\n    }\n  }, [bounds, center, centerPoint, zoom]);\n\n  return (\n    <NaverMapContext.Provider value={nmap}>\n      <EventTargetContext.Provider value={nmap}>\n        <>\n          <HandleEvents\n            events={events}\n            listeners={mapProps as any}\n          />\n          {children}\n        </>\n      </EventTargetContext.Provider>\n    </NaverMapContext.Provider>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}