{"ast":null,"code":"import { Listener } from \"./chunk-E5EY34JY.mjs\";\n\n// src/helpers/event.tsx\nimport camelcase from \"camelcase\";\nimport pick from \"lodash.pick\";\nimport { useMemo } from \"react\";\nimport { Fragment, jsx } from \"react/jsx-runtime\";\nfunction HandleEvents(props) {\n  const {\n    events,\n    listeners: _listeners\n  } = props;\n  const eventMap = useMemo(() => createEventMap(events), events);\n  const listeners = pick(_listeners, Object.keys(eventMap));\n  return /* @__PURE__ */jsx(Fragment, {\n    children: Object.keys(listeners).map(key => {\n      const eventName = eventMap[key];\n      const listener = listeners[key];\n      return listener ? /* @__PURE__ */jsx(Listener, {\n        type: eventName,\n        listener\n      }, key) : null;\n    })\n  });\n}\nfunction createEventMap(events) {\n  return events.reduce((acc, eventName) => {\n    const key = camelcase(`on_${eventName}`);\n    return {\n      [key]: eventName,\n      ...acc\n    };\n  }, {});\n}\nexport { HandleEvents };","map":{"version":3,"names":["camelcase","pick","useMemo","Fragment","jsx","HandleEvents","props","events","listeners","_listeners","eventMap","createEventMap","Object","keys","children","map","key","eventName","listener","Listener","type","reduce","acc"],"sources":["C:\\Users\\mhcho1\\Desktop\\react-Project\\kakaomap-app\\node_modules\\react-naver-maps\\src\\helpers\\event.tsx"],"sourcesContent":["\nimport camelcase from 'camelcase';\nimport pick from 'lodash.pick';\nimport { useMemo } from 'react';\n\nimport { Listener } from '../listener';\n\ntype Props = {\n  events: string[];\n  listeners: Record<string, (...args: any[]) => any>;\n};\n\nexport function HandleEvents(props: Props) {\n  const { events, listeners: _listeners } = props;\n\n  const eventMap = useMemo(() => createEventMap(events), events);\n  const listeners = pick(_listeners, Object.keys(eventMap)) as unknown as Record<string, (e: any) => void>;\n\n  return (\n    <>\n      {Object.keys(listeners).map(key => {\n\n        const eventName = eventMap[key];\n        const listener = listeners[key];\n\n        return listener ? <Listener\n          key={key}\n          type={eventName}\n          listener={listener}\n        /> : null;\n      })}\n    </>\n  );\n}\n\n\nfunction createEventMap(events: string[]): Record<string, string> {\n  return events.reduce((acc, eventName) => {\n    const key = camelcase(`on_${eventName}`);\n\n    return {\n      [key]: eventName,\n      ...acc,\n    };\n  }, {});\n}\n"],"mappings":";;;AACA,OAAOA,SAAA,MAAe;AACtB,OAAOC,IAAA,MAAU;AACjB,SAASC,OAAA,QAAe;AAgBpB,SAAAC,QAAA,EAMsBC,GAAA,QANtB;AAPG,SAASC,aAAaC,KAAA,EAAc;EACzC,MAAM;IAAEC,MAAA;IAAQC,SAAA,EAAWC;EAAW,IAAIH,KAAA;EAE1C,MAAMI,QAAA,GAAWR,OAAA,CAAQ,MAAMS,cAAA,CAAeJ,MAAM,GAAGA,MAAM;EAC7D,MAAMC,SAAA,GAAYP,IAAA,CAAKQ,UAAA,EAAYG,MAAA,CAAOC,IAAA,CAAKH,QAAQ,CAAC;EAExD,OACE,eAAAN,GAAA,CAAAD,QAAA;IACGW,QAAA,EAAAF,MAAA,CAAOC,IAAA,CAAKL,SAAS,EAAEO,GAAA,CAAIC,GAAA,IAAO;MAEjC,MAAMC,SAAA,GAAYP,QAAA,CAASM,GAAA;MAC3B,MAAME,QAAA,GAAWV,SAAA,CAAUQ,GAAA;MAE3B,OAAOE,QAAA,GAAW,eAAAd,GAAA,CAACe,QAAA;QAEjBC,IAAA,EAAMH,SAAA;QACNC;MAAA,GAFKF,GAGP,IAAK;IACP,CAAC;EAAA,CACH;AAEJ;AAGA,SAASL,eAAeJ,MAAA,EAA0C;EAChE,OAAOA,MAAA,CAAOc,MAAA,CAAO,CAACC,GAAA,EAAKL,SAAA,KAAc;IACvC,MAAMD,GAAA,GAAMhB,SAAA,CAAU,MAAMiB,SAAA,EAAW;IAEvC,OAAO;MACL,CAACD,GAAA,GAAMC,SAAA;MACP,GAAGK;IACL;EACF,GAAG,CAAC,CAAC;AACP"},"metadata":{},"sourceType":"module","externalDependencies":[]}