{"ast":null,"code":"import { omitUndefined } from \"./chunk-RVDAKL7Q.mjs\";\nimport { useNavermaps } from \"./chunk-TWFVD6WD.mjs\";\nimport { HandleEvents } from \"./chunk-533MYCRP.mjs\";\nimport { Overlay } from \"./chunk-IV7GZJYG.mjs\";\n\n// src/overlays/info-window.tsx\nimport pick from \"lodash.pick\";\nimport { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar primitiveKvoKeys = [\"content\", \"zIndex\", \"maxWidth\", \"pixelOffset\", \"backgroundColor\", \"borderColor\", \"borderWidth\", \"disableAutoPan\", \"disableAnchor\", \"anchorSkew\", \"anchorSize\", \"anchorColor\"];\nvar kvoKeys = [...primitiveKvoKeys, \"position\"];\nvar kvoEvents = kvoKeys.map(key => `${key}_changed`);\nvar uiEvents = [\"mousedown\", \"mouseup\", \"click\", \"dblclick\", \"rightclick\", \"mouseover\", \"mouseout\", \"mousemove\"];\nvar events = [...uiEvents, ...kvoEvents];\nvar InfoWindow = forwardRef(function InfoWindow2(props, ref) {\n  const {\n    position\n  } = props;\n  const navermaps = useNavermaps();\n  const [infoWindow] = useState(() => new navermaps.InfoWindow(omitUndefined(pick(props, [...kvoKeys]))));\n  useImperativeHandle(ref, () => infoWindow);\n  useEffect(() => {\n    infoWindow.setOptions(omitUndefined(pick(props, primitiveKvoKeys)));\n  }, primitiveKvoKeys.map(key => props[key]));\n  useEffect(() => {\n    if (position && infoWindow.getPosition().equals(position)) {\n      infoWindow.setPosition(position);\n    }\n  }, [position]);\n  return /* @__PURE__ */jsx(Overlay, {\n    element: infoWindow,\n    autoMount: false,\n    children: /* @__PURE__ */jsx(HandleEvents, {\n      events,\n      listeners: props\n    })\n  });\n});\nexport { InfoWindow };","map":{"version":3,"names":["pick","forwardRef","useEffect","useImperativeHandle","useState","jsx","primitiveKvoKeys","kvoKeys","kvoEvents","map","key","uiEvents","events","InfoWindow","InfoWindow2","props","ref","position","navermaps","useNavermaps","infoWindow","omitUndefined","setOptions","getPosition","equals","setPosition","Overlay","element","autoMount","children","HandleEvents","listeners"],"sources":["C:\\Users\\mhcho1\\Desktop\\react-Project\\kakaomap-app\\node_modules\\react-naver-maps\\src\\overlays\\info-window.tsx"],"sourcesContent":["import pick from 'lodash.pick';\nimport { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\n\nimport { HandleEvents } from '../helpers/event';\nimport { Overlay } from '../overlay';\nimport type { UIEventHandlers } from '../types/event';\nimport { useNavermaps } from '../use-navermaps';\nimport { omitUndefined } from '../utils/omit-undefined';\n\nconst primitiveKvoKeys = [\n  'content',\n  'zIndex',\n  'maxWidth',\n  'pixelOffset',\n  'backgroundColor',\n  'borderColor',\n  'borderWidth',\n  'disableAutoPan',\n  'disableAnchor',\n  'anchorSkew',\n  'anchorSize',\n  'anchorColor',\n] as const;\nconst kvoKeys = [\n  ...primitiveKvoKeys,\n  'position',\n] as const;\nconst kvoEvents = kvoKeys.map(key => `${key}_changed`);\nconst uiEvents = [\n  'mousedown',\n  'mouseup',\n  'click',\n  'dblclick',\n  'rightclick',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n] as const;\nconst events = [...uiEvents, ...kvoEvents];\n\ntype InfoWindowOptions = {\n  /**\n   * position\n   * @type naver.maps.Coord | naver.maps.CoordLiteral\n   */\n  position?: naver.maps.Coord | naver.maps.CoordLiteral;\n  content: string;\n  zIndex?: number;\n  maxWidth?: number;\n  /**\n   * @type naver.maps.Point | naver.maps.PointLiteral\n   */\n  pixelOffset?: naver.maps.Point | naver.maps.PointLiteral;\n  backgroundColor?: string;\n  borderColor?: string;\n  borderWidth?: number;\n  disableAutoPan?: boolean;\n  disableAnchor?: boolean;\n  anchorSkew?: boolean;\n  /**\n   * @type naver.maps.Size | naver.maps.SizeLiteral\n   */\n  anchorSize?: naver.maps.Size | naver.maps.SizeLiteral;\n  anchorColor?: string;\n};\n\nexport type Props = InfoWindowOptions & {\n  onPositionChanged?: (value: naver.maps.Coord) => void;\n  onContentChanged?: (value: HTMLElement) => void;\n  onZIndexChanged?: (value: number) => void;\n  onMaxWidthChanged?: (value: number) => void;\n  onPixelOffsetChanged?: (value: naver.maps.Point) => void;\n  onBackgroundColorChanged?: (value: string) => void;\n  onBorderColorChanged?: (value: string) => void;\n  onBorderWidthChanged?: (value: number) => void;\n  onDisableAutoPanChanged?: (value: boolean) => void;\n  onDisableAnchorChanged?: (value: boolean) => void;\n  onAnchorSkewChanged?: (value: boolean) => void;\n  onAnchorSizeChanged?: (value: naver.maps.Size) => void;\n  onAnchorColorChanged?: (value: string) => void;\n} & UIEventHandlers<typeof uiEvents>;\n\nexport const InfoWindow = forwardRef<naver.maps.InfoWindow, Props>(function InfoWindow(props, ref) {\n  const { position } = props;\n  const navermaps = useNavermaps();\n  const [infoWindow] = useState(() => new navermaps.InfoWindow(omitUndefined(pick(props, [...kvoKeys])) as InfoWindowOptions));\n\n  useImperativeHandle<naver.maps.InfoWindow | undefined, naver.maps.InfoWindow | undefined>(ref, () => infoWindow);\n\n  useEffect(() => {\n    infoWindow.setOptions(omitUndefined(pick(props, primitiveKvoKeys)) as InfoWindowOptions); // TODO: FIX DefinilyTyped\n  }, primitiveKvoKeys.map(key => props[key]));\n\n  useEffect(() => {\n    if (position && infoWindow.getPosition().equals(position as naver.maps.Point)) {\n      infoWindow.setPosition(position);\n    }\n  }, [position]);\n\n  return (\n    <Overlay element={infoWindow} autoMount={false}>\n      <HandleEvents events={events} listeners={props as any} />\n    </Overlay>\n  );\n});\n"],"mappings":";;;;;;AAAA,OAAOA,IAAA,MAAU;AACjB,SAASC,UAAA,EAAYC,SAAA,EAAWC,mBAAA,EAAqBC,QAAA,QAAgB;AAoG/D,SAAAC,GAAA;AA5FN,IAAMC,gBAAA,GAAmB,CACvB,WACA,UACA,YACA,eACA,mBACA,eACA,eACA,kBACA,iBACA,cACA,cACA,cACF;AACA,IAAMC,OAAA,GAAU,CACd,GAAGD,gBAAA,EACH,WACF;AACA,IAAME,SAAA,GAAYD,OAAA,CAAQE,GAAA,CAAIC,GAAA,IAAO,GAAGA,GAAA,UAAa;AACrD,IAAMC,QAAA,GAAW,CACf,aACA,WACA,SACA,YACA,cACA,aACA,YACA,YACF;AACA,IAAMC,MAAA,GAAS,CAAC,GAAGD,QAAA,EAAU,GAAGH,SAAS;AA4ClC,IAAMK,UAAA,GAAaZ,UAAA,CAAyC,SAASa,YAAWC,KAAA,EAAOC,GAAA,EAAK;EACjG,MAAM;IAAEC;EAAS,IAAIF,KAAA;EACrB,MAAMG,SAAA,GAAYC,YAAA,EAAa;EAC/B,MAAM,CAACC,UAAU,IAAIhB,QAAA,CAAS,MAAM,IAAIc,SAAA,CAAUL,UAAA,CAAWQ,aAAA,CAAcrB,IAAA,CAAKe,KAAA,EAAO,CAAC,GAAGR,OAAO,CAAC,CAAC,CAAsB,CAAC;EAE3HJ,mBAAA,CAA0Fa,GAAA,EAAK,MAAMI,UAAU;EAE/GlB,SAAA,CAAU,MAAM;IACdkB,UAAA,CAAWE,UAAA,CAAWD,aAAA,CAAcrB,IAAA,CAAKe,KAAA,EAAOT,gBAAgB,CAAC,CAAsB;EACzF,GAAGA,gBAAA,CAAiBG,GAAA,CAAIC,GAAA,IAAOK,KAAA,CAAML,GAAA,CAAI,CAAC;EAE1CR,SAAA,CAAU,MAAM;IACd,IAAIe,QAAA,IAAYG,UAAA,CAAWG,WAAA,EAAY,CAAEC,MAAA,CAAOP,QAA4B,GAAG;MAC7EG,UAAA,CAAWK,WAAA,CAAYR,QAAQ;IACjC;EACF,GAAG,CAACA,QAAQ,CAAC;EAEb,OACE,eAAAZ,GAAA,CAACqB,OAAA;IAAQC,OAAA,EAASP,UAAA;IAAYQ,SAAA,EAAW;IACvCC,QAAA,iBAAAxB,GAAA,CAACyB,YAAA;MAAalB,MAAA;MAAgBmB,SAAA,EAAWhB;IAAA,CAAc;EAAA,CACzD;AAEJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}